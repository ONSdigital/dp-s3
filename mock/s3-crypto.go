// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-s3"
	"github.com/aws/aws-sdk-go/service/s3"
	"sync"
)

// Ensure, that S3CryptoClientMock does implement s3client.S3CryptoClient.
// If this is not the case, regenerate this file with moq.
var _ s3client.S3CryptoClient = &S3CryptoClientMock{}

// S3CryptoClientMock is a mock implementation of s3client.S3CryptoClient.
//
// 	func TestSomethingThatUsesS3CryptoClient(t *testing.T) {
//
// 		// make and configure a mocked s3client.S3CryptoClient
// 		mockedS3CryptoClient := &S3CryptoClientMock{
// 			GetObjectWithPSKFunc: func(getObjectInput *s3.GetObjectInput, bytes []byte) (*s3.GetObjectOutput, error) {
// 				panic("mock out the GetObjectWithPSK method")
// 			},
// 			PutObjectWithPSKFunc: func(putObjectInput *s3.PutObjectInput, bytes []byte) (*s3.PutObjectOutput, error) {
// 				panic("mock out the PutObjectWithPSK method")
// 			},
// 			UploadPartWithPSKFunc: func(uploadPartInput *s3.UploadPartInput, bytes []byte) (*s3.UploadPartOutput, error) {
// 				panic("mock out the UploadPartWithPSK method")
// 			},
// 		}
//
// 		// use mockedS3CryptoClient in code that requires s3client.S3CryptoClient
// 		// and then make assertions.
//
// 	}
type S3CryptoClientMock struct {
	// GetObjectWithPSKFunc mocks the GetObjectWithPSK method.
	GetObjectWithPSKFunc func(getObjectInput *s3.GetObjectInput, bytes []byte) (*s3.GetObjectOutput, error)

	// PutObjectWithPSKFunc mocks the PutObjectWithPSK method.
	PutObjectWithPSKFunc func(putObjectInput *s3.PutObjectInput, bytes []byte) (*s3.PutObjectOutput, error)

	// UploadPartWithPSKFunc mocks the UploadPartWithPSK method.
	UploadPartWithPSKFunc func(uploadPartInput *s3.UploadPartInput, bytes []byte) (*s3.UploadPartOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetObjectWithPSK holds details about calls to the GetObjectWithPSK method.
		GetObjectWithPSK []struct {
			// GetObjectInput is the getObjectInput argument value.
			GetObjectInput *s3.GetObjectInput
			// Bytes is the bytes argument value.
			Bytes []byte
		}
		// PutObjectWithPSK holds details about calls to the PutObjectWithPSK method.
		PutObjectWithPSK []struct {
			// PutObjectInput is the putObjectInput argument value.
			PutObjectInput *s3.PutObjectInput
			// Bytes is the bytes argument value.
			Bytes []byte
		}
		// UploadPartWithPSK holds details about calls to the UploadPartWithPSK method.
		UploadPartWithPSK []struct {
			// UploadPartInput is the uploadPartInput argument value.
			UploadPartInput *s3.UploadPartInput
			// Bytes is the bytes argument value.
			Bytes []byte
		}
	}
	lockGetObjectWithPSK  sync.RWMutex
	lockPutObjectWithPSK  sync.RWMutex
	lockUploadPartWithPSK sync.RWMutex
}

// GetObjectWithPSK calls GetObjectWithPSKFunc.
func (mock *S3CryptoClientMock) GetObjectWithPSK(getObjectInput *s3.GetObjectInput, bytes []byte) (*s3.GetObjectOutput, error) {
	if mock.GetObjectWithPSKFunc == nil {
		panic("S3CryptoClientMock.GetObjectWithPSKFunc: method is nil but S3CryptoClient.GetObjectWithPSK was just called")
	}
	callInfo := struct {
		GetObjectInput *s3.GetObjectInput
		Bytes          []byte
	}{
		GetObjectInput: getObjectInput,
		Bytes:          bytes,
	}
	mock.lockGetObjectWithPSK.Lock()
	mock.calls.GetObjectWithPSK = append(mock.calls.GetObjectWithPSK, callInfo)
	mock.lockGetObjectWithPSK.Unlock()
	return mock.GetObjectWithPSKFunc(getObjectInput, bytes)
}

// GetObjectWithPSKCalls gets all the calls that were made to GetObjectWithPSK.
// Check the length with:
//     len(mockedS3CryptoClient.GetObjectWithPSKCalls())
func (mock *S3CryptoClientMock) GetObjectWithPSKCalls() []struct {
	GetObjectInput *s3.GetObjectInput
	Bytes          []byte
} {
	var calls []struct {
		GetObjectInput *s3.GetObjectInput
		Bytes          []byte
	}
	mock.lockGetObjectWithPSK.RLock()
	calls = mock.calls.GetObjectWithPSK
	mock.lockGetObjectWithPSK.RUnlock()
	return calls
}

// PutObjectWithPSK calls PutObjectWithPSKFunc.
func (mock *S3CryptoClientMock) PutObjectWithPSK(putObjectInput *s3.PutObjectInput, bytes []byte) (*s3.PutObjectOutput, error) {
	if mock.PutObjectWithPSKFunc == nil {
		panic("S3CryptoClientMock.PutObjectWithPSKFunc: method is nil but S3CryptoClient.PutObjectWithPSK was just called")
	}
	callInfo := struct {
		PutObjectInput *s3.PutObjectInput
		Bytes          []byte
	}{
		PutObjectInput: putObjectInput,
		Bytes:          bytes,
	}
	mock.lockPutObjectWithPSK.Lock()
	mock.calls.PutObjectWithPSK = append(mock.calls.PutObjectWithPSK, callInfo)
	mock.lockPutObjectWithPSK.Unlock()
	return mock.PutObjectWithPSKFunc(putObjectInput, bytes)
}

// PutObjectWithPSKCalls gets all the calls that were made to PutObjectWithPSK.
// Check the length with:
//     len(mockedS3CryptoClient.PutObjectWithPSKCalls())
func (mock *S3CryptoClientMock) PutObjectWithPSKCalls() []struct {
	PutObjectInput *s3.PutObjectInput
	Bytes          []byte
} {
	var calls []struct {
		PutObjectInput *s3.PutObjectInput
		Bytes          []byte
	}
	mock.lockPutObjectWithPSK.RLock()
	calls = mock.calls.PutObjectWithPSK
	mock.lockPutObjectWithPSK.RUnlock()
	return calls
}

// UploadPartWithPSK calls UploadPartWithPSKFunc.
func (mock *S3CryptoClientMock) UploadPartWithPSK(uploadPartInput *s3.UploadPartInput, bytes []byte) (*s3.UploadPartOutput, error) {
	if mock.UploadPartWithPSKFunc == nil {
		panic("S3CryptoClientMock.UploadPartWithPSKFunc: method is nil but S3CryptoClient.UploadPartWithPSK was just called")
	}
	callInfo := struct {
		UploadPartInput *s3.UploadPartInput
		Bytes           []byte
	}{
		UploadPartInput: uploadPartInput,
		Bytes:           bytes,
	}
	mock.lockUploadPartWithPSK.Lock()
	mock.calls.UploadPartWithPSK = append(mock.calls.UploadPartWithPSK, callInfo)
	mock.lockUploadPartWithPSK.Unlock()
	return mock.UploadPartWithPSKFunc(uploadPartInput, bytes)
}

// UploadPartWithPSKCalls gets all the calls that were made to UploadPartWithPSK.
// Check the length with:
//     len(mockedS3CryptoClient.UploadPartWithPSKCalls())
func (mock *S3CryptoClientMock) UploadPartWithPSKCalls() []struct {
	UploadPartInput *s3.UploadPartInput
	Bytes           []byte
} {
	var calls []struct {
		UploadPartInput *s3.UploadPartInput
		Bytes           []byte
	}
	mock.lockUploadPartWithPSK.RLock()
	calls = mock.calls.UploadPartWithPSK
	mock.lockUploadPartWithPSK.RUnlock()
	return calls
}
