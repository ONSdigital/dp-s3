// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-s3"
	"github.com/aws/aws-sdk-go/service/s3"
	"sync"
)

var (
	lockS3CryptoClientMockUploadPartWithPSK sync.RWMutex
)

// Ensure, that S3CryptoClientMock does implement s3client.S3CryptoClient.
// If this is not the case, regenerate this file with moq.
var _ s3client.S3CryptoClient = &S3CryptoClientMock{}

// S3CryptoClientMock is a mock implementation of s3client.S3CryptoClient.
//
//     func TestSomethingThatUsesS3CryptoClient(t *testing.T) {
//
//         // make and configure a mocked s3client.S3CryptoClient
//         mockedS3CryptoClient := &S3CryptoClientMock{
//             UploadPartWithPSKFunc: func(in1 *s3.UploadPartInput, in2 []byte) (*s3.UploadPartOutput, error) {
// 	               panic("mock out the UploadPartWithPSK method")
//             },
//         }
//
//         // use mockedS3CryptoClient in code that requires s3client.S3CryptoClient
//         // and then make assertions.
//
//     }
type S3CryptoClientMock struct {
	// UploadPartWithPSKFunc mocks the UploadPartWithPSK method.
	UploadPartWithPSKFunc func(in1 *s3.UploadPartInput, in2 []byte) (*s3.UploadPartOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// UploadPartWithPSK holds details about calls to the UploadPartWithPSK method.
		UploadPartWithPSK []struct {
			// In1 is the in1 argument value.
			In1 *s3.UploadPartInput
			// In2 is the in2 argument value.
			In2 []byte
		}
	}
}

// UploadPartWithPSK calls UploadPartWithPSKFunc.
func (mock *S3CryptoClientMock) UploadPartWithPSK(in1 *s3.UploadPartInput, in2 []byte) (*s3.UploadPartOutput, error) {
	if mock.UploadPartWithPSKFunc == nil {
		panic("S3CryptoClientMock.UploadPartWithPSKFunc: method is nil but S3CryptoClient.UploadPartWithPSK was just called")
	}
	callInfo := struct {
		In1 *s3.UploadPartInput
		In2 []byte
	}{
		In1: in1,
		In2: in2,
	}
	lockS3CryptoClientMockUploadPartWithPSK.Lock()
	mock.calls.UploadPartWithPSK = append(mock.calls.UploadPartWithPSK, callInfo)
	lockS3CryptoClientMockUploadPartWithPSK.Unlock()
	return mock.UploadPartWithPSKFunc(in1, in2)
}

// UploadPartWithPSKCalls gets all the calls that were made to UploadPartWithPSK.
// Check the length with:
//     len(mockedS3CryptoClient.UploadPartWithPSKCalls())
func (mock *S3CryptoClientMock) UploadPartWithPSKCalls() []struct {
	In1 *s3.UploadPartInput
	In2 []byte
} {
	var calls []struct {
		In1 *s3.UploadPartInput
		In2 []byte
	}
	lockS3CryptoClientMockUploadPartWithPSK.RLock()
	calls = mock.calls.UploadPartWithPSK
	lockS3CryptoClientMockUploadPartWithPSK.RUnlock()
	return calls
}
