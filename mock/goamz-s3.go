// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-s3"
	"io"
	"sync"
)

var (
	lockAmzClientMockGetBucketReader sync.RWMutex
)

// Ensure, that AmzClientMock does implement s3client.AmzClient.
// If this is not the case, regenerate this file with moq.
var _ s3client.AmzClient = &AmzClientMock{}

// AmzClientMock is a mock implementation of s3client.AmzClient.
//
//     func TestSomethingThatUsesAmzClient(t *testing.T) {
//
//         // make and configure a mocked s3client.AmzClient
//         mockedAmzClient := &AmzClientMock{
//             GetBucketReaderFunc: func(bucketName string, path string) (io.ReadCloser, error) {
// 	               panic("mock out the GetBucketReader method")
//             },
//         }
//
//         // use mockedAmzClient in code that requires s3client.AmzClient
//         // and then make assertions.
//
//     }
type AmzClientMock struct {
	// GetBucketReaderFunc mocks the GetBucketReader method.
	GetBucketReaderFunc func(bucketName string, path string) (io.ReadCloser, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetBucketReader holds details about calls to the GetBucketReader method.
		GetBucketReader []struct {
			// BucketName is the bucketName argument value.
			BucketName string
			// Path is the path argument value.
			Path string
		}
	}
}

// GetBucketReader calls GetBucketReaderFunc.
func (mock *AmzClientMock) GetBucketReader(bucketName string, path string) (io.ReadCloser, error) {
	if mock.GetBucketReaderFunc == nil {
		panic("AmzClientMock.GetBucketReaderFunc: method is nil but AmzClient.GetBucketReader was just called")
	}
	callInfo := struct {
		BucketName string
		Path       string
	}{
		BucketName: bucketName,
		Path:       path,
	}
	lockAmzClientMockGetBucketReader.Lock()
	mock.calls.GetBucketReader = append(mock.calls.GetBucketReader, callInfo)
	lockAmzClientMockGetBucketReader.Unlock()
	return mock.GetBucketReaderFunc(bucketName, path)
}

// GetBucketReaderCalls gets all the calls that were made to GetBucketReader.
// Check the length with:
//     len(mockedAmzClient.GetBucketReaderCalls())
func (mock *AmzClientMock) GetBucketReaderCalls() []struct {
	BucketName string
	Path       string
} {
	var calls []struct {
		BucketName string
		Path       string
	}
	lockAmzClientMockGetBucketReader.RLock()
	calls = mock.calls.GetBucketReader
	lockAmzClientMockGetBucketReader.RUnlock()
	return calls
}
