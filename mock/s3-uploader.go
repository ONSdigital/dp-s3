// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-s3"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"sync"
)

// Ensure, that S3SDKUploaderMock does implement s3client.S3SDKUploader.
// If this is not the case, regenerate this file with moq.
var _ s3client.S3SDKUploader = &S3SDKUploaderMock{}

// S3SDKUploaderMock is a mock implementation of s3client.S3SDKUploader.
//
// 	func TestSomethingThatUsesS3SDKUploader(t *testing.T) {
//
// 		// make and configure a mocked s3client.S3SDKUploader
// 		mockedS3SDKUploader := &S3SDKUploaderMock{
// 			UploadFunc: func(uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
// 				panic("mock out the Upload method")
// 			},
// 			UploadWithContextFunc: func(contextMoqParam context.Context, uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
// 				panic("mock out the UploadWithContext method")
// 			},
// 		}
//
// 		// use mockedS3SDKUploader in code that requires s3client.S3SDKUploader
// 		// and then make assertions.
//
// 	}
type S3SDKUploaderMock struct {
	// UploadFunc mocks the Upload method.
	UploadFunc func(uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)

	// UploadWithContextFunc mocks the UploadWithContext method.
	UploadWithContextFunc func(contextMoqParam context.Context, uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Upload holds details about calls to the Upload method.
		Upload []struct {
			// UploadInput is the uploadInput argument value.
			UploadInput *s3manager.UploadInput
			// Fns is the fns argument value.
			Fns []func(*s3manager.Uploader)
		}
		// UploadWithContext holds details about calls to the UploadWithContext method.
		UploadWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UploadInput is the uploadInput argument value.
			UploadInput *s3manager.UploadInput
			// Fns is the fns argument value.
			Fns []func(*s3manager.Uploader)
		}
	}
	lockUpload            sync.RWMutex
	lockUploadWithContext sync.RWMutex
}

// Upload calls UploadFunc.
func (mock *S3SDKUploaderMock) Upload(uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	if mock.UploadFunc == nil {
		panic("S3SDKUploaderMock.UploadFunc: method is nil but S3SDKUploader.Upload was just called")
	}
	callInfo := struct {
		UploadInput *s3manager.UploadInput
		Fns         []func(*s3manager.Uploader)
	}{
		UploadInput: uploadInput,
		Fns:         fns,
	}
	mock.lockUpload.Lock()
	mock.calls.Upload = append(mock.calls.Upload, callInfo)
	mock.lockUpload.Unlock()
	return mock.UploadFunc(uploadInput, fns...)
}

// UploadCalls gets all the calls that were made to Upload.
// Check the length with:
//     len(mockedS3SDKUploader.UploadCalls())
func (mock *S3SDKUploaderMock) UploadCalls() []struct {
	UploadInput *s3manager.UploadInput
	Fns         []func(*s3manager.Uploader)
} {
	var calls []struct {
		UploadInput *s3manager.UploadInput
		Fns         []func(*s3manager.Uploader)
	}
	mock.lockUpload.RLock()
	calls = mock.calls.Upload
	mock.lockUpload.RUnlock()
	return calls
}

// UploadWithContext calls UploadWithContextFunc.
func (mock *S3SDKUploaderMock) UploadWithContext(contextMoqParam context.Context, uploadInput *s3manager.UploadInput, fns ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	if mock.UploadWithContextFunc == nil {
		panic("S3SDKUploaderMock.UploadWithContextFunc: method is nil but S3SDKUploader.UploadWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UploadInput     *s3manager.UploadInput
		Fns             []func(*s3manager.Uploader)
	}{
		ContextMoqParam: contextMoqParam,
		UploadInput:     uploadInput,
		Fns:             fns,
	}
	mock.lockUploadWithContext.Lock()
	mock.calls.UploadWithContext = append(mock.calls.UploadWithContext, callInfo)
	mock.lockUploadWithContext.Unlock()
	return mock.UploadWithContextFunc(contextMoqParam, uploadInput, fns...)
}

// UploadWithContextCalls gets all the calls that were made to UploadWithContext.
// Check the length with:
//     len(mockedS3SDKUploader.UploadWithContextCalls())
func (mock *S3SDKUploaderMock) UploadWithContextCalls() []struct {
	ContextMoqParam context.Context
	UploadInput     *s3manager.UploadInput
	Fns             []func(*s3manager.Uploader)
} {
	var calls []struct {
		ContextMoqParam context.Context
		UploadInput     *s3manager.UploadInput
		Fns             []func(*s3manager.Uploader)
	}
	mock.lockUploadWithContext.RLock()
	calls = mock.calls.UploadWithContext
	mock.lockUploadWithContext.RUnlock()
	return calls
}
