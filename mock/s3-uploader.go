// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	v2 "github.com/ONSdigital/dp-s3/v2"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	"sync"
)

// Ensure, that S3SDKUploaderMock does implement v2.S3SDKUploader.
// If this is not the case, regenerate this file with moq.
var _ v2.S3SDKUploader = &S3SDKUploaderMock{}

// S3SDKUploaderMock is a mock implementation of v2.S3SDKUploader.
//
//	func TestSomethingThatUsesS3SDKUploader(t *testing.T) {
//
//		// make and configure a mocked v2.S3SDKUploader
//		mockedS3SDKUploader := &S3SDKUploaderMock{
//			UploadFunc: func(ctx context.Context, in *s3.PutObjectInput, options ...func(*manager.Uploader)) (*manager.UploadOutput, error) {
//				panic("mock out the Upload method")
//			},
//		}
//
//		// use mockedS3SDKUploader in code that requires v2.S3SDKUploader
//		// and then make assertions.
//
//	}
type S3SDKUploaderMock struct {
	// UploadFunc mocks the Upload method.
	UploadFunc func(ctx context.Context, in *s3.PutObjectInput, options ...func(*manager.Uploader)) (*manager.UploadOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Upload holds details about calls to the Upload method.
		Upload []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *s3.PutObjectInput
			// Options is the options argument value.
			Options []func(*manager.Uploader)
		}
	}
	lockUpload sync.RWMutex
}

// Upload calls UploadFunc.
func (mock *S3SDKUploaderMock) Upload(ctx context.Context, in *s3.PutObjectInput, options ...func(*manager.Uploader)) (*manager.UploadOutput, error) {
	if mock.UploadFunc == nil {
		panic("S3SDKUploaderMock.UploadFunc: method is nil but S3SDKUploader.Upload was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		In      *s3.PutObjectInput
		Options []func(*manager.Uploader)
	}{
		Ctx:     ctx,
		In:      in,
		Options: options,
	}
	mock.lockUpload.Lock()
	mock.calls.Upload = append(mock.calls.Upload, callInfo)
	mock.lockUpload.Unlock()
	return mock.UploadFunc(ctx, in, options...)
}

// UploadCalls gets all the calls that were made to Upload.
// Check the length with:
//
//	len(mockedS3SDKUploader.UploadCalls())
func (mock *S3SDKUploaderMock) UploadCalls() []struct {
	Ctx     context.Context
	In      *s3.PutObjectInput
	Options []func(*manager.Uploader)
} {
	var calls []struct {
		Ctx     context.Context
		In      *s3.PutObjectInput
		Options []func(*manager.Uploader)
	}
	mock.lockUpload.RLock()
	calls = mock.calls.Upload
	mock.lockUpload.RUnlock()
	return calls
}
