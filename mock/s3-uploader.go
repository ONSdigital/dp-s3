// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-s3"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"sync"
)

var (
	lockS3SDKUploaderMockUpload sync.RWMutex
)

// Ensure, that S3SDKUploaderMock does implement s3client.S3SDKUploader.
// If this is not the case, regenerate this file with moq.
var _ s3client.S3SDKUploader = &S3SDKUploaderMock{}

// S3SDKUploaderMock is a mock implementation of s3client.S3SDKUploader.
//
//     func TestSomethingThatUsesS3SDKUploader(t *testing.T) {
//
//         // make and configure a mocked s3client.S3SDKUploader
//         mockedS3SDKUploader := &S3SDKUploaderMock{
//             UploadFunc: func(in1 *s3manager.UploadInput, in2 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
// 	               panic("mock out the Upload method")
//             },
//         }
//
//         // use mockedS3SDKUploader in code that requires s3client.S3SDKUploader
//         // and then make assertions.
//
//     }
type S3SDKUploaderMock struct {
	// UploadFunc mocks the Upload method.
	UploadFunc func(in1 *s3manager.UploadInput, in2 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Upload holds details about calls to the Upload method.
		Upload []struct {
			// In1 is the in1 argument value.
			In1 *s3manager.UploadInput
			// In2 is the in2 argument value.
			In2 []func(*s3manager.Uploader)
		}
	}
}

// Upload calls UploadFunc.
func (mock *S3SDKUploaderMock) Upload(in1 *s3manager.UploadInput, in2 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	if mock.UploadFunc == nil {
		panic("S3SDKUploaderMock.UploadFunc: method is nil but S3SDKUploader.Upload was just called")
	}
	callInfo := struct {
		In1 *s3manager.UploadInput
		In2 []func(*s3manager.Uploader)
	}{
		In1: in1,
		In2: in2,
	}
	lockS3SDKUploaderMockUpload.Lock()
	mock.calls.Upload = append(mock.calls.Upload, callInfo)
	lockS3SDKUploaderMockUpload.Unlock()
	return mock.UploadFunc(in1, in2...)
}

// UploadCalls gets all the calls that were made to Upload.
// Check the length with:
//     len(mockedS3SDKUploader.UploadCalls())
func (mock *S3SDKUploaderMock) UploadCalls() []struct {
	In1 *s3manager.UploadInput
	In2 []func(*s3manager.Uploader)
} {
	var calls []struct {
		In1 *s3manager.UploadInput
		In2 []func(*s3manager.Uploader)
	}
	lockS3SDKUploaderMockUpload.RLock()
	calls = mock.calls.Upload
	lockS3SDKUploaderMockUpload.RUnlock()
	return calls
}
