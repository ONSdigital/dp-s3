// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-s3"
	"github.com/aws/aws-sdk-go/service/s3"
	"sync"
)

// Ensure, that S3SDKClientMock does implement s3client.S3SDKClient.
// If this is not the case, regenerate this file with moq.
var _ s3client.S3SDKClient = &S3SDKClientMock{}

// S3SDKClientMock is a mock implementation of s3client.S3SDKClient.
//
// 	func TestSomethingThatUsesS3SDKClient(t *testing.T) {
//
// 		// make and configure a mocked s3client.S3SDKClient
// 		mockedS3SDKClient := &S3SDKClientMock{
// 			CompleteMultipartUploadFunc: func(completeMultipartUploadInput *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
// 				panic("mock out the CompleteMultipartUpload method")
// 			},
// 			CreateMultipartUploadFunc: func(createMultipartUploadInput *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
// 				panic("mock out the CreateMultipartUpload method")
// 			},
// 			GetObjectFunc: func(getObjectInput *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
// 				panic("mock out the GetObject method")
// 			},
// 			HeadBucketFunc: func(headBucketInput *s3.HeadBucketInput) (*s3.HeadBucketOutput, error) {
// 				panic("mock out the HeadBucket method")
// 			},
// 			ListMultipartUploadsFunc: func(listMultipartUploadsInput *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error) {
// 				panic("mock out the ListMultipartUploads method")
// 			},
// 			ListPartsFunc: func(listPartsInput *s3.ListPartsInput) (*s3.ListPartsOutput, error) {
// 				panic("mock out the ListParts method")
// 			},
// 			UploadPartFunc: func(uploadPartInput *s3.UploadPartInput) (*s3.UploadPartOutput, error) {
// 				panic("mock out the UploadPart method")
// 			},
// 		}
//
// 		// use mockedS3SDKClient in code that requires s3client.S3SDKClient
// 		// and then make assertions.
//
// 	}
type S3SDKClientMock struct {
	// CompleteMultipartUploadFunc mocks the CompleteMultipartUpload method.
	CompleteMultipartUploadFunc func(completeMultipartUploadInput *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)

	// CreateMultipartUploadFunc mocks the CreateMultipartUpload method.
	CreateMultipartUploadFunc func(createMultipartUploadInput *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)

	// GetObjectFunc mocks the GetObject method.
	GetObjectFunc func(getObjectInput *s3.GetObjectInput) (*s3.GetObjectOutput, error)

	// HeadBucketFunc mocks the HeadBucket method.
	HeadBucketFunc func(headBucketInput *s3.HeadBucketInput) (*s3.HeadBucketOutput, error)

	// ListMultipartUploadsFunc mocks the ListMultipartUploads method.
	ListMultipartUploadsFunc func(listMultipartUploadsInput *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error)

	// ListPartsFunc mocks the ListParts method.
	ListPartsFunc func(listPartsInput *s3.ListPartsInput) (*s3.ListPartsOutput, error)

	// UploadPartFunc mocks the UploadPart method.
	UploadPartFunc func(uploadPartInput *s3.UploadPartInput) (*s3.UploadPartOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// CompleteMultipartUpload holds details about calls to the CompleteMultipartUpload method.
		CompleteMultipartUpload []struct {
			// CompleteMultipartUploadInput is the completeMultipartUploadInput argument value.
			CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
		}
		// CreateMultipartUpload holds details about calls to the CreateMultipartUpload method.
		CreateMultipartUpload []struct {
			// CreateMultipartUploadInput is the createMultipartUploadInput argument value.
			CreateMultipartUploadInput *s3.CreateMultipartUploadInput
		}
		// GetObject holds details about calls to the GetObject method.
		GetObject []struct {
			// GetObjectInput is the getObjectInput argument value.
			GetObjectInput *s3.GetObjectInput
		}
		// HeadBucket holds details about calls to the HeadBucket method.
		HeadBucket []struct {
			// HeadBucketInput is the headBucketInput argument value.
			HeadBucketInput *s3.HeadBucketInput
		}
		// ListMultipartUploads holds details about calls to the ListMultipartUploads method.
		ListMultipartUploads []struct {
			// ListMultipartUploadsInput is the listMultipartUploadsInput argument value.
			ListMultipartUploadsInput *s3.ListMultipartUploadsInput
		}
		// ListParts holds details about calls to the ListParts method.
		ListParts []struct {
			// ListPartsInput is the listPartsInput argument value.
			ListPartsInput *s3.ListPartsInput
		}
		// UploadPart holds details about calls to the UploadPart method.
		UploadPart []struct {
			// UploadPartInput is the uploadPartInput argument value.
			UploadPartInput *s3.UploadPartInput
		}
	}
	lockCompleteMultipartUpload sync.RWMutex
	lockCreateMultipartUpload   sync.RWMutex
	lockGetObject               sync.RWMutex
	lockHeadBucket              sync.RWMutex
	lockListMultipartUploads    sync.RWMutex
	lockListParts               sync.RWMutex
	lockUploadPart              sync.RWMutex
}

// CompleteMultipartUpload calls CompleteMultipartUploadFunc.
func (mock *S3SDKClientMock) CompleteMultipartUpload(completeMultipartUploadInput *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
	if mock.CompleteMultipartUploadFunc == nil {
		panic("S3SDKClientMock.CompleteMultipartUploadFunc: method is nil but S3SDKClient.CompleteMultipartUpload was just called")
	}
	callInfo := struct {
		CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
	}{
		CompleteMultipartUploadInput: completeMultipartUploadInput,
	}
	mock.lockCompleteMultipartUpload.Lock()
	mock.calls.CompleteMultipartUpload = append(mock.calls.CompleteMultipartUpload, callInfo)
	mock.lockCompleteMultipartUpload.Unlock()
	return mock.CompleteMultipartUploadFunc(completeMultipartUploadInput)
}

// CompleteMultipartUploadCalls gets all the calls that were made to CompleteMultipartUpload.
// Check the length with:
//     len(mockedS3SDKClient.CompleteMultipartUploadCalls())
func (mock *S3SDKClientMock) CompleteMultipartUploadCalls() []struct {
	CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
} {
	var calls []struct {
		CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
	}
	mock.lockCompleteMultipartUpload.RLock()
	calls = mock.calls.CompleteMultipartUpload
	mock.lockCompleteMultipartUpload.RUnlock()
	return calls
}

// CreateMultipartUpload calls CreateMultipartUploadFunc.
func (mock *S3SDKClientMock) CreateMultipartUpload(createMultipartUploadInput *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
	if mock.CreateMultipartUploadFunc == nil {
		panic("S3SDKClientMock.CreateMultipartUploadFunc: method is nil but S3SDKClient.CreateMultipartUpload was just called")
	}
	callInfo := struct {
		CreateMultipartUploadInput *s3.CreateMultipartUploadInput
	}{
		CreateMultipartUploadInput: createMultipartUploadInput,
	}
	mock.lockCreateMultipartUpload.Lock()
	mock.calls.CreateMultipartUpload = append(mock.calls.CreateMultipartUpload, callInfo)
	mock.lockCreateMultipartUpload.Unlock()
	return mock.CreateMultipartUploadFunc(createMultipartUploadInput)
}

// CreateMultipartUploadCalls gets all the calls that were made to CreateMultipartUpload.
// Check the length with:
//     len(mockedS3SDKClient.CreateMultipartUploadCalls())
func (mock *S3SDKClientMock) CreateMultipartUploadCalls() []struct {
	CreateMultipartUploadInput *s3.CreateMultipartUploadInput
} {
	var calls []struct {
		CreateMultipartUploadInput *s3.CreateMultipartUploadInput
	}
	mock.lockCreateMultipartUpload.RLock()
	calls = mock.calls.CreateMultipartUpload
	mock.lockCreateMultipartUpload.RUnlock()
	return calls
}

// GetObject calls GetObjectFunc.
func (mock *S3SDKClientMock) GetObject(getObjectInput *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	if mock.GetObjectFunc == nil {
		panic("S3SDKClientMock.GetObjectFunc: method is nil but S3SDKClient.GetObject was just called")
	}
	callInfo := struct {
		GetObjectInput *s3.GetObjectInput
	}{
		GetObjectInput: getObjectInput,
	}
	mock.lockGetObject.Lock()
	mock.calls.GetObject = append(mock.calls.GetObject, callInfo)
	mock.lockGetObject.Unlock()
	return mock.GetObjectFunc(getObjectInput)
}

// GetObjectCalls gets all the calls that were made to GetObject.
// Check the length with:
//     len(mockedS3SDKClient.GetObjectCalls())
func (mock *S3SDKClientMock) GetObjectCalls() []struct {
	GetObjectInput *s3.GetObjectInput
} {
	var calls []struct {
		GetObjectInput *s3.GetObjectInput
	}
	mock.lockGetObject.RLock()
	calls = mock.calls.GetObject
	mock.lockGetObject.RUnlock()
	return calls
}

// HeadBucket calls HeadBucketFunc.
func (mock *S3SDKClientMock) HeadBucket(headBucketInput *s3.HeadBucketInput) (*s3.HeadBucketOutput, error) {
	if mock.HeadBucketFunc == nil {
		panic("S3SDKClientMock.HeadBucketFunc: method is nil but S3SDKClient.HeadBucket was just called")
	}
	callInfo := struct {
		HeadBucketInput *s3.HeadBucketInput
	}{
		HeadBucketInput: headBucketInput,
	}
	mock.lockHeadBucket.Lock()
	mock.calls.HeadBucket = append(mock.calls.HeadBucket, callInfo)
	mock.lockHeadBucket.Unlock()
	return mock.HeadBucketFunc(headBucketInput)
}

// HeadBucketCalls gets all the calls that were made to HeadBucket.
// Check the length with:
//     len(mockedS3SDKClient.HeadBucketCalls())
func (mock *S3SDKClientMock) HeadBucketCalls() []struct {
	HeadBucketInput *s3.HeadBucketInput
} {
	var calls []struct {
		HeadBucketInput *s3.HeadBucketInput
	}
	mock.lockHeadBucket.RLock()
	calls = mock.calls.HeadBucket
	mock.lockHeadBucket.RUnlock()
	return calls
}

// ListMultipartUploads calls ListMultipartUploadsFunc.
func (mock *S3SDKClientMock) ListMultipartUploads(listMultipartUploadsInput *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error) {
	if mock.ListMultipartUploadsFunc == nil {
		panic("S3SDKClientMock.ListMultipartUploadsFunc: method is nil but S3SDKClient.ListMultipartUploads was just called")
	}
	callInfo := struct {
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
	}{
		ListMultipartUploadsInput: listMultipartUploadsInput,
	}
	mock.lockListMultipartUploads.Lock()
	mock.calls.ListMultipartUploads = append(mock.calls.ListMultipartUploads, callInfo)
	mock.lockListMultipartUploads.Unlock()
	return mock.ListMultipartUploadsFunc(listMultipartUploadsInput)
}

// ListMultipartUploadsCalls gets all the calls that were made to ListMultipartUploads.
// Check the length with:
//     len(mockedS3SDKClient.ListMultipartUploadsCalls())
func (mock *S3SDKClientMock) ListMultipartUploadsCalls() []struct {
	ListMultipartUploadsInput *s3.ListMultipartUploadsInput
} {
	var calls []struct {
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
	}
	mock.lockListMultipartUploads.RLock()
	calls = mock.calls.ListMultipartUploads
	mock.lockListMultipartUploads.RUnlock()
	return calls
}

// ListParts calls ListPartsFunc.
func (mock *S3SDKClientMock) ListParts(listPartsInput *s3.ListPartsInput) (*s3.ListPartsOutput, error) {
	if mock.ListPartsFunc == nil {
		panic("S3SDKClientMock.ListPartsFunc: method is nil but S3SDKClient.ListParts was just called")
	}
	callInfo := struct {
		ListPartsInput *s3.ListPartsInput
	}{
		ListPartsInput: listPartsInput,
	}
	mock.lockListParts.Lock()
	mock.calls.ListParts = append(mock.calls.ListParts, callInfo)
	mock.lockListParts.Unlock()
	return mock.ListPartsFunc(listPartsInput)
}

// ListPartsCalls gets all the calls that were made to ListParts.
// Check the length with:
//     len(mockedS3SDKClient.ListPartsCalls())
func (mock *S3SDKClientMock) ListPartsCalls() []struct {
	ListPartsInput *s3.ListPartsInput
} {
	var calls []struct {
		ListPartsInput *s3.ListPartsInput
	}
	mock.lockListParts.RLock()
	calls = mock.calls.ListParts
	mock.lockListParts.RUnlock()
	return calls
}

// UploadPart calls UploadPartFunc.
func (mock *S3SDKClientMock) UploadPart(uploadPartInput *s3.UploadPartInput) (*s3.UploadPartOutput, error) {
	if mock.UploadPartFunc == nil {
		panic("S3SDKClientMock.UploadPartFunc: method is nil but S3SDKClient.UploadPart was just called")
	}
	callInfo := struct {
		UploadPartInput *s3.UploadPartInput
	}{
		UploadPartInput: uploadPartInput,
	}
	mock.lockUploadPart.Lock()
	mock.calls.UploadPart = append(mock.calls.UploadPart, callInfo)
	mock.lockUploadPart.Unlock()
	return mock.UploadPartFunc(uploadPartInput)
}

// UploadPartCalls gets all the calls that were made to UploadPart.
// Check the length with:
//     len(mockedS3SDKClient.UploadPartCalls())
func (mock *S3SDKClientMock) UploadPartCalls() []struct {
	UploadPartInput *s3.UploadPartInput
} {
	var calls []struct {
		UploadPartInput *s3.UploadPartInput
	}
	mock.lockUploadPart.RLock()
	calls = mock.calls.UploadPart
	mock.lockUploadPart.RUnlock()
	return calls
}
