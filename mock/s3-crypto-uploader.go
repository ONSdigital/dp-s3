// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-s3/v2"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"sync"
)

var (
	lockS3CryptoUploaderMockUploadWithPSK sync.RWMutex
)

// Ensure, that S3CryptoUploaderMock does implement s3client.S3CryptoUploader.
// If this is not the case, regenerate this file with moq.
var _ s3client.S3CryptoUploader = &S3CryptoUploaderMock{}

// S3CryptoUploaderMock is a mock implementation of s3client.S3CryptoUploader.
//
//     func TestSomethingThatUsesS3CryptoUploader(t *testing.T) {
//
//         // make and configure a mocked s3client.S3CryptoUploader
//         mockedS3CryptoUploader := &S3CryptoUploaderMock{
//             UploadWithPSKFunc: func(in1 *s3manager.UploadInput, in2 []byte) (*s3manager.UploadOutput, error) {
// 	               panic("mock out the UploadWithPSK method")
//             },
//         }
//
//         // use mockedS3CryptoUploader in code that requires s3client.S3CryptoUploader
//         // and then make assertions.
//
//     }
type S3CryptoUploaderMock struct {
	// UploadWithPSKFunc mocks the UploadWithPSK method.
	UploadWithPSKFunc func(in1 *s3manager.UploadInput, in2 []byte) (*s3manager.UploadOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// UploadWithPSK holds details about calls to the UploadWithPSK method.
		UploadWithPSK []struct {
			// In1 is the in1 argument value.
			In1 *s3manager.UploadInput
			// In2 is the in2 argument value.
			In2 []byte
		}
	}
}

// UploadWithPSK calls UploadWithPSKFunc.
func (mock *S3CryptoUploaderMock) UploadWithPSK(in1 *s3manager.UploadInput, in2 []byte) (*s3manager.UploadOutput, error) {
	if mock.UploadWithPSKFunc == nil {
		panic("S3CryptoUploaderMock.UploadWithPSKFunc: method is nil but S3CryptoUploader.UploadWithPSK was just called")
	}
	callInfo := struct {
		In1 *s3manager.UploadInput
		In2 []byte
	}{
		In1: in1,
		In2: in2,
	}
	lockS3CryptoUploaderMockUploadWithPSK.Lock()
	mock.calls.UploadWithPSK = append(mock.calls.UploadWithPSK, callInfo)
	lockS3CryptoUploaderMockUploadWithPSK.Unlock()
	return mock.UploadWithPSKFunc(in1, in2)
}

// UploadWithPSKCalls gets all the calls that were made to UploadWithPSK.
// Check the length with:
//     len(mockedS3CryptoUploader.UploadWithPSKCalls())
func (mock *S3CryptoUploaderMock) UploadWithPSKCalls() []struct {
	In1 *s3manager.UploadInput
	In2 []byte
} {
	var calls []struct {
		In1 *s3manager.UploadInput
		In2 []byte
	}
	lockS3CryptoUploaderMockUploadWithPSK.RLock()
	calls = mock.calls.UploadWithPSK
	lockS3CryptoUploaderMockUploadWithPSK.RUnlock()
	return calls
}
